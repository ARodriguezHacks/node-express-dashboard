#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require("../app");
const debug = require("debug")("log-dashboard:server");
const http = require("http");
const WebSocket = require("ws");
const fs = require("fs");
const { settings } = require("../services/settings-service.js");


/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

const wss = new WebSocket.Server({ server });

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

wss.on("connection", (ws) => {
  ws.on("message", (message) => {
    const filePath = message
    fs.watch(filePath, (eventType, filename) => {
      fs.createReadStream(filePath).on("data", chunk => {
        let logs = chunk.toString().split("\n")
        if (settings.user.defaultFilter) {
          logs = logs.filter(line => !line.includes(settings.user.defaultFilter))
        }
        // Default to newestFirst. Reverse the array so we"re sending the newest entries first
        logs = settings.user.sortOrder === "oldestFirst" ? logs : logs.reverse()
        ws.send(logs.toString().split(",").join("\n"))
      })
    })
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string"
    ? "Pipe " + port
    : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string"
    ? "pipe " + addr
    : "port " + addr.port;
  debug("Listening on " + bind);
}
